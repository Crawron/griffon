need:
	command calling
	command metadata/documentation
	help command
	per-guild config / storage solution
	argument parsing
	await response
	voice
	(?) proper logging

matchers:
	check whether a message follows a certain condition. if it does, run the related command action. if does not, decides between failing silently or with an error message

commands:
	: have a list command names, used to check on prefixes of messages, and a list of condition matchers, for extra conditions.
	  + command dispatcher traverses the command tree on every new message.
		  check every command if the beginning of the message matches one of the command names
			
			if it does, check the command conditions, if there's a match or an error, stop tree traversal and run command action or error respectively.
			(command action gets passed the message content that didn't match the command name prefix, as arguments)

			if the command 

	- must execute on specified conditions (including always or never), most of the time a message prefix matching one of the command names.
	- these conditions may fail silently or not. if not, halt condition checking and reply with cause of fail.
	- gears describes the command 

extra notes:
	- matcher system in gears is nice, but i would like a way for matchers to not fail silently (done!)
	  -- optionally returning some error object would probably help (done!)
		-- maybe actually just throwing inside matchers would work. but where to catch? (nope)
		-- should matchers really be allowed to modify the call context? just for the sake of experimentation, lets say no. (they shouldn't)
		-- actually, just returning some result would be better. (it wasn't, just returning match, skip or error status is fine)

await response system:
	commands can tell the bot to wait for some condition on message.
	- 



Bot {
	message event handler {
		traverse command tree {
		
			find command 
		}

		- run commands
		- 
	}
}


(context) => {
	const { bot, message } = context
	message.channel.send("gimmie a number")

	const responseMatcher = matchAll(
		matchContext(context)
		matchRegex(/^\d+/$)
	)

	const responseContext = await bot.waitForResponse(responseMatcher)
	const primeResponse = checkPrime(respContext.argument) ?
		"that's a prime yes" :
		"that's not prime :c"

	respContext.channel.send(primeResponse)
}
